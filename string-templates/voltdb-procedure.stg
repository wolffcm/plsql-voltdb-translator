
src_file(header_comment, package, imported_pkgs, class_def) ::= <<
<header_comment>

package <package>;

import org.voltdb.SQLStmt;
import org.voltdb.VoltProcedure;
import org.voltdb.VoltTable;

<if(imported_pkgs)><imported_pkgs: {pkg | import <pkg>;}; separator="\n">
<endif>
<class_def>
>>

class_def(name, constant_decls, sql_stmts, methods) ::= <<
public class <name> extends VoltProcedure {

    <constant_decls; separator="\n">

    <sql_stmts; separator="\n">

    <methods; separator="\n">
}
>>

variable_decl(visibility, is_static, is_final, var_type, var_name, init) ::= <<
<if(visibility)><visibility> <endif><if(is_static)>static <endif><if(is_final)>final <endif><var_type> <var_name><if(init)> = <init><endif>;
>>

empty_line() ::= <<

>>

freeform_line(text) ::= <<
<text>
>>

sql_stmt(name, java_string) ::= <<
public final SQLStmt <name> = new SQLStmt(<java_string>);
>>

run_method(ret_type, args, stmts) ::= <<
public <ret_type> run(<args: {arg | <arg.type> <arg.name>}; separator=", ">) <stmts>
>>

slist(stmts) ::= <<
{
    <stmts; separator="\n">
}
>>

queue_sql_stmt(stmt_name, params) ::= <<
voltQueueSql(<stmt_name><if(params)>, <params: {param | <param>}; separator=", "><endif>);
>>

execute_sql_stmt(variable_name) ::= <<
<variable_name> = voltExecuteSQL()[0];
>>

assignment_stmt(lhs, rhs) ::= <<
<lhs> = <rhs>;
>>

return_stmt(ret_val) ::= <<
return <ret_val>;
>>

if_stmt(cond, then_block) ::= <<
if (<cond>) <then_block>

>>
